# Compiler and commands
CC = gcc
RM = rm -f

# Use pkg-config to get all necessary flags and libraries for FFmpeg.
# This is the most reliable way to handle FFmpeg's dependencies.
FFMPEG_LIBS   = libavdevice libavformat libavfilter libavcodec libswresample libswscale libavutil
# Add -MMD -MP to CFLAGS for automatic dependency generation
CFLAGS       += -Wall -g -MMD -MP $(shell pkg-config --cflags $(FFMPEG_LIBS)) -I$(PWD)/include
LDLIBS       += $(shell pkg-config --libs $(FFMPEG_LIBS))

# --- Define your programs here ---

# Program 1: find_keyframes
FK_EXE = bin/find_keyframes
FK_SRC = src/find_keyframes.c
FK_OBJ = $(FK_SRC:.c=.o)

# Program 2: segment_transcode
ST_EXE = bin/segment_transcode
ST_SRC = src/segment_transcode.c
ST_OBJ = $(ST_SRC:.c=.o)

# Program 3: hm_transcode
HT_EXE = bin/hm_transcode
HT_SRC = src/hm_transcode.c
HT_OBJ = $(HT_SRC:.c=.o)

# --- Define build targets ---

# The 'all' target will build all the specified executables.
all: $(FK_EXE) $(ST_EXE) $(HT_EXE)

# --- Linking Rules ---
# Each program gets its own rule to link its specific object files.

$(FK_EXE): $(FK_OBJ)
	@echo "LD $@"
	$(CC) $(LDFLAGS) $^ $(LDLIBS) -o $@

$(ST_EXE): $(ST_OBJ)
	@echo "LD $@"
	$(CC) $(LDFLAGS) $^ $(LDLIBS) -o $@

$(HT_EXE): $(HT_OBJ)
	@echo "LD $@"
	$(CC) $(LDFLAGS) $^ $(LDLIBS) -o $@


# --- Generic Compilation and Dependency Rules ---

# Generic pattern rule to compile any .c file into a .o file.
# This one rule works for all source files of all programs.
%.o: %.c
	@echo "CC $<"
	$(CC) $(CFLAGS) -c $< -o $@

# Include all the dependency files (.d) generated by the compiler.
# This makes the build aware of header file changes.
DEPS = $(FK_SRC:.c=.d) $(ST_SRC:.c=.d) $(HT_SRC:.c=.d)
-include $(DEPS)


# --- Housekeeping ---

.PHONY: all clean

clean:
	@echo "Cleaning up..."
	$(RM) $(FK_EXE) $(ST_EXE) $(HT_EXE) $(FK_OBJ) $(ST_OBJ) $(HT_OBJ) $(DEPS)
